{"ast":null,"code":"var _jsxFileName = \"/Users/maccheesebook/Documents/SlyTech/notes/src/pages/NotePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from \"@svgr/webpack?-svgo,+titleProp,+ref!../assets/arrow-left.svg\"; // import notes from '../assets/data'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NotePage = () => {\n  _s();\n\n  let params = useParams();\n  let noteId = params.noteId;\n  let [note, setNote] = useState(null);\n  useEffect(() => {\n    getNote();\n  }, [noteId]); // let note = notes.find(note => note.id === noteId)\n\n  let getNote = async () => {\n    if (noteId === 'new') return;\n    let response = await fetch(`http://127.0.0.1:5000/notes/${noteId}`);\n    let data = await response.json();\n    setNote(data);\n  };\n\n  let createNote = async () => {\n    await fetch('http://127.0.0.1:5000/notes/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ ...note,\n        'updated': new Date()\n      })\n    });\n  };\n\n  let updateNote = async () => {\n    await fetch(`http://127.0.0.1:5000/notes/${noteId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ ...note,\n        'updated': new Date()\n      })\n    });\n  };\n\n  let deleteNote = async () => {\n    await fetch(`http://127.0.0.1:5000/notes/${noteId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    });\n  };\n\n  let handleSubmit = () => {\n    if (noteId !== 'new' && !note.body) {\n      deleteNote();\n    } else if (noteId !== 'new') {\n      updateNote();\n    } else if (noteId === 'new' && note !== null) {\n      createNote();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n            onClick: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), noteId !== 'new' ? /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        onClick: deleteNote,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        onClick: handleSubmit,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => {\n        setNote({ ...note,\n          'body': e.target.value\n        });\n      },\n      value: note === null || note === void 0 ? void 0 : note.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NotePage, \"GyecKfmZuiEQj7DMlhNIJEsUGEg=\", false, function () {\n  return [useParams];\n});\n\n_c = NotePage;\nexport default NotePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"sources":["/Users/maccheesebook/Documents/SlyTech/notes/src/pages/NotePage.js"],"names":["React","useState","useEffect","Link","useParams","NotePage","params","noteId","note","setNote","getNote","response","fetch","data","json","createNote","method","headers","body","JSON","stringify","Date","updateNote","deleteNote","handleSubmit","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\n// import notes from '../assets/data'\n\nconst NotePage = () => {\n    let params = useParams()\n    let noteId = params.noteId\n\n    let [note, setNote] = useState(null)\n\n    useEffect(() => {\n        getNote()\n    }, [noteId])\n    // let note = notes.find(note => note.id === noteId)\n\n    let getNote = async () => {\n        if (noteId === 'new') return\n\n        let response = await fetch(`http://127.0.0.1:5000/notes/${noteId}`)\n        let data = await response.json()\n        setNote(data)\n    }\n\n    let createNote = async () => {\n        await fetch('http://127.0.0.1:5000/notes/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ ...note, 'updated': new Date() })\n        })\n    }\n\n    let updateNote = async () => {\n        await fetch(`http://127.0.0.1:5000/notes/${noteId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ ...note, 'updated': new Date() })\n        })\n    }\n\n    let deleteNote = async () => {\n        await fetch(`http://127.0.0.1:5000/notes/${noteId}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(note)\n        })\n    }\n\n    let handleSubmit = () => {\n        if (noteId !== 'new' && !note.body) {\n            deleteNote()\n        } else if (noteId !== 'new') {\n            updateNote()\n        } else if (noteId === 'new' && note !== null) {\n            createNote()\n        }\n    }\n\n    return (\n        <div className='note'>\n\n            <div className='note-header'>\n                <h3>\n                    <Link to='/'>\n                        <ArrowLeft onClick={handleSubmit} />\n                    </Link>\n                </h3>\n                {noteId !== 'new' ? (\n                    <Link to='/' onClick={deleteNote}>Delete</Link>\n                ) : (\n                    <Link to='/' onClick={handleSubmit}>Done</Link>\n                )}\n            </div>\n            <textarea onChange={(e) => { setNote({ ...note, 'body': e.target.value }) }} value={note?.body}></textarea>\n        </div>\n    )\n}\n\nexport default NotePage\n"]},"metadata":{},"sourceType":"module"}